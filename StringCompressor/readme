Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of consecutive repeating characters in chars:

If the group's length is 1, append the character to s.
Otherwise, append the character followed by the group's length.
The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done modifying the input array, return the new length of the array.

You must write an algorithm that uses only constant extra space.

 

Example 1:

Input: chars = ["a","a","b","b","c","c","c"]
Output: Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]
Explanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".
Example 2:

Input: chars = ["a"]
Output: Return 1, and the first character of the input array should be: ["a"]
Explanation: The only group is "a", which remains uncompressed since it's a single character.
Example 3:

Input: chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
Output: Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].
Explanation: The groups are "a" and "bbbbbbbbbbbb". This compresses to "ab12".


>>>>>
Comment I may have worked on this for about an hour but I have iterated with about 
20 simulations before I got it right. I may have attempted to use debug feature of the IDE but I 
was using VS code and had tech difficulties with using the run with debug feature so ended up not using it and turned to system out debugging instead.

Anyway I had this challenge for my entrance exam for a job interview I had with one of the startups. The difficult part was I was given 15 minutes and without using the internet 
and a compiler and the code should be runnable and should be correct the first time which got me thinking that perhaps this was a meant to fail test, so 
I did my best but I think my output then was a psuedocode and not runnable. Sadly I did not get the job.

Well at least it got me thinking and here I am now attempting at it again but using a whole hour.